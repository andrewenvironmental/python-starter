---
title: "Containerization"
---

Package and environment management is necessary, but is insufficient to ensure reproducible projects. 
Environments run on operating systems, which run on real or virtual machines.
Containerization is a technology developed to support reproducibility and virtualization (at scale) of operating systems. 

*Why use a container:*
There are several benefits for using containers including: 
Reproducibility: Containers encapsulate all necessary components ensuring that applications run seamlessly across different environments.
Rapid Deployment: Containers can be started quickly, which improves performance.
Automated Rollouts and Rollbacks: Container managers perform version control functions, similar to git, which helps manage changes over time 
Resource Efficiency: Multiple containers can run on the same infrastructure, which allows users to make use of the same virtual machines for multiple uses
Isolation: Containers ensure that applications run in isolation from each other, improving security and access control and improving maintainability.
Scalability: Containers can be easily scaled up or down based on the demand, making applications available with changing needs and demands.

Use of containers is beneficial for collaborative development and deployment for software applications and complex tools like machine learning models. 

*What do containers do*
Containers include the information needed to enable code sharing and application deployment. 
Unlike a code repository, which contains information about environment requirements which enables a user to retrieve and build the specified environment, 
a container stores all of the code, packages, and dependencies needed to run the code regardless of operating system and settings.

The leading tools for containerization of Python (or, really, any development) projects are Docker and Kubernetes. 
These and other popular tools are described below.

## Docker
Docker is a platform that helps developers to build, ship, and run containers. 
"A Docker container image is a lightweight, standalone, executable package of software that includes 
everything needed to run an application: code, runtime, system tools, system libraries and settings."

A paid subscription is required for professional and commercial use of Docker Desktop. 
Brown and Caldwell does not currently have provide enterprise or user licenses for Docker.
Free and open-source alternatives (such as Buildah, Containerd, Podman) may be available and more appropriate for use. 

## Azure Container Instances
Azure Container Instances is a tool that allows a developer to run a container in Azure (a cloud platform),
without having to manage any virtual machines and without having to adopt a higher-level service.

Often, this tool is paired with the use of *Azure Container Registry*, which supports versioning and enables rollbacks of deployments. 

## Kubernetes
Kubernetes is a container orchestration system that automates the deployment, scaling, and management of containerized applications.

## Helm
Helm is a package manager for Kubernetes, simplifying the deployment and management of applications on Kubernetes clusters.